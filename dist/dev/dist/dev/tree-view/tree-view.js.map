{"version":3,"sources":["tree-view/tree-view.js"],"names":[],"mappings":"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","file":"tree-view/tree-view.js","sourceRoot":"/source/","sourcesContent":["import {bindable} from 'aurelia-templating';\nimport {inject} from 'aurelia-dependency-injection';\nimport {getLogger} from 'aurelia-logging';\nimport {bindingMode} from 'aurelia-binding';\nimport {NodeModel} from './node-model';\nimport {TreeNode} from './tree-node';\nimport {fireEvent} from '../common/events';\n\n@inject(Element)\nexport class TreeView {\n  @bindable() expandOnSelect: boolean = false;\n  @bindable() nodes: NodeModel[];\n  @bindable({\n    defaultBindingMode: bindingMode.twoWay\n  }) selected: NodeModel = null;\n\n  constructor(element) {\n    this.element = element;\n    this.log = getLogger('tree-view');\n\n    let templateElement = this.element.querySelector('tree-node-template');\n    if (templateElement) {\n      this.templateElement = templateElement;\n    } else {\n      // this.log.warn('ctor - no template element');\n    }\n  }\n\n  created() {\n    if (this.templateElement) {\n      if (this.templateElement.au) {\n        let viewModel = this.templateElement.au.controller.viewModel;\n        this.log.debug('viewModel', viewModel);\n      } else {\n        this.log.warn('no viewmodel found for template', this.templateElement);\n      }\n    } else {\n      // this.log.warn('created - no template element');\n    }\n  }\n\n  nodesChanged(newValue, oldValue) {\n    if (newValue && this.templateElement) {\n      // newValue.forEach(node => {\n      //   node._template = this.templateElement.au.controller.viewModel.template;\n      // });\n      this.enhanceNodes(newValue);\n    }\n  }\n\n  enhanceNodes(nodes: NodeModel[]) {\n    nodes.forEach(node => {\n      if (node.children && typeof node.children !== 'function') {\n        this.enhanceNodes(node.children);\n      }\n      node._template = this.templateElement.au.controller.viewModel.template;\n    });\n  }\n\n  onSelected(e) {\n    if (this.selected && this.selected !== e.detail.node) {\n      this.selected.deselectNode();\n    }\n    this.selected = e.detail.node;\n    if (this.expandOnSelect) {\n      this.selected.expandNode();\n    }\n    fireEvent(this.element, 'selected', e.detail);\n  }\n\n  expandOnSelectChanged(newValue) {\n    this.expandOnSelect = (newValue === true || newValue === 'true');\n  }\n\n  // moveNode(node: TreeNode, target: TreeNode | TreeView) {\n  //   console.log('moveNode', node, target);\n  //   if (target instanceof TreeNode) {\n  //     target.model.children.push(node.model);\n  //   }\n  //   // target.model.children.push(node.model);\n  //   let parent = node.element.parentNode;\n  //   let children;\n  //   while (parent !== null && parent.tagName !== 'TREE-NODE') {\n  //     parent = parent.parentNode;\n  //   }\n  //   if (parent === null) {\n  //     children = this.nodes;\n  //   } else {\n  //     children = parent.au['tree-node'].viewModel.model.children;\n  //   }\n  //   let pos = children.indexOf(node.model);\n  //   children.splice(pos, 1);\n  // }\n\n  moveNode(node: TreeNode, target: TreeNode | TreeView, sibling: TreeNode) {\n    console.log('moveNode', node, target, sibling);\n\n    if (target instanceof TreeNode) {\n      // target.model.children.push(node.model);\n      target.insertChild(node, sibling);\n      let parent = node.element.parentNode;\n      while (parent !== null && parent.tagName !== 'TREE-NODE') {\n        parent = parent.parentNode;\n      }\n      if (parent === null) {\n        parent = this;\n        parent.removeNode(node);\n      } else {\n        parent.au['tree-node'].viewModel.removeChild(node.model);\n      }\n    }\n  }\n\n  removeNode(node: TreeNode) {\n    console.warn('removeNode not implemented');\n  }\n}\n"]}