{"version":3,"sources":["tree-view/tree-view.js"],"names":[],"mappings":"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","file":"tree-view/tree-view.js","sourceRoot":"/source/","sourcesContent":["import {bindable} from 'aurelia-templating';\nimport {inject} from 'aurelia-dependency-injection';\nimport {getLogger} from 'aurelia-logging';\nimport {bindingMode} from 'aurelia-binding';\nimport {NodeModel} from './node-model';\nimport {TreeNode} from './tree-node';\nimport {fireEvent} from '../common/events';\n\n@inject(Element)\nexport class TreeView {\n  @bindable() expandOnFocus: boolean = false;\n  @bindable() selectOnFocus: boolean = false;\n  @bindable() nodes: NodeModel[];\n  @bindable() multiSelect: boolean = false;\n  @bindable({\n    defaultBindingMode: bindingMode.twoWay\n  }) focused: NodeModel = null;\n  @bindable({\n    defaultBindingMode: bindingMode.twoWay\n  }) selected: NodeModel[] = [];\n  subscriptions = [];\n\n  // comparers\n  @bindable() compareEquality = null;\n\n  bind() {\n    this.expandOnFocus = (this.expandOnFocus === true || this.expandOnFocus === 'true');\n    this.multiSelect = (this.multiSelect === true || this.multiSelect === 'true');\n    this.selectOnFocus = (this.selectOnFocus === true || this.selectOnFocus === 'true');\n  }\n\n  constructor(element) {\n    this.element = element;\n    this.log = getLogger('tree-view');\n    this.compareEquality = (args) => { return args.a === args.b; };\n\n    let templateElement = this.element.querySelector('tree-node-template');\n    if (templateElement) {\n      this.templateElement = templateElement;\n    } else {\n      // this.log.warn('ctor - no template element');\n    }\n  }\n\n  attached() { }\n\n  detached() { }\n\n  created() {\n    if (this.templateElement) {\n      if (this.templateElement.au) {\n        let viewModel = this.templateElement.au.controller.viewModel;\n        this.log.debug('viewModel', viewModel);\n      } else {\n        this.log.warn('no viewmodel found for template', this.templateElement);\n      }\n    } else {\n      // this.log.warn('created - no template element');\n    }\n  }\n\n  nodesChanged(newValue, oldValue) {\n    if (newValue) {\n      // && this.templateElement\n      this.enhanceNodes(newValue);\n      this.preselectNodes(newValue);\n    }\n  }\n\n  enhanceNodes(nodes: NodeModel[]) {\n    nodes.forEach(node => {\n      if (node.children && typeof node.children !== 'function') {\n        this.enhanceNodes(node.children);\n      }\n      if (this.templateElement) {\n        node._template = this.templateElement.au.controller.viewModel.template;\n        node._templateModel = this.templateElement.au.controller.viewModel.model;\n      }\n      // node._tree = this;\n      node._tree = {\n        focusNode: this.focusNode.bind(this),\n        selectNode: this.selectNode.bind(this),\n        deselectNode: this.deselectNode.bind(this),\n        multiSelect: this.multiSelect\n      };\n    });\n  }\n\n  preselectNodes(nodes: NodeModel[]) {\n    nodes.forEach(node => {\n      if (this.selected.find(n => this.compareEquality({a: node, b: n}))) {\n        node.selected = true;\n        if (!this.multiSelect) {\n          node.focused = true;\n        }\n        node.expandNode().then(() => {\n          this.preselectNodes(node.children);\n        });\n      }\n    });\n  }\n\n  _suspendEvents = false;\n  _suspendUpdate = false;\n  focusNode(node: NodeModel, modifiers = {}) {\n    if (!this._suspendUpdate) {\n      if (node !== this.focused) {\n        if (this.focused) {\n          this._suspendUpdate = true;\n          this.focused.focused = false;\n          this._suspendUpdate = false;\n        }\n        this.focused = node;\n        fireEvent(this.element, 'focused', { node });\n        if (this.expandOnFocus) {\n          node.expandNode();\n        }\n      }\n      if (this.selectOnFocus) {\n        // node.selected = !node.selected;\n        node.selected = true;\n        // this.selectNode(node);\n        if (modifiers['ctrl']) {\n          let recurse = !!modifiers['shift'];\n          node.selectChildren(recurse);\n        }\n      }\n    }\n  }\n\n  selectNode(node: NodeModel) {\n    let existing = this.selected.findIndex(n => this.compareEquality({a: node, b: n}));\n    if (existing === -1) {\n      this.log.debug('selecting node', node);\n      if (!this.multiSelect) {\n        this._suspendEvents = true;\n        this.selected.forEach(n => n.selected = false);\n        this._suspendEvents = false;\n      }\n      this.selected.push(node);\n      if (!this._suspendEvents) {\n        fireEvent(this.element, 'selection-changed', { nodes: this.selected });\n      }\n    }\n  }\n\n  deselectNode(node: NodeModel) {\n    let index = this.selected.findIndex(n => this.compareEquality({a: node, b: n}));\n    if (index === -1) {\n      this.log.error('node not found in selected', node);\n    } else {\n      this.log.debug('deselecting node', node);\n      this.selected.splice(index, 1);\n      if (!this._suspendEvents) {\n        fireEvent(this.element, 'selection-changed', { nodes: this.selected });\n      }\n    }\n  }\n\n  expandOnFocusChanged(newValue) {\n    this.expandOnFocus = (newValue === true || newValue === 'true');\n  }\n\n  clearSelection() {\n    this.selected.forEach(node => {\n      node.selected = false;\n    });\n    if (this.focused) {\n      this.focused.focused = false;\n    }\n  }\n\n  // moveNode(node: TreeNode, target: TreeNode | TreeView) {\n  //   console.log('moveNode', node, target);\n  //   if (target instanceof TreeNode) {\n  //     target.model.children.push(node.model);\n  //   }\n  //   // target.model.children.push(node.model);\n  //   let parent = node.element.parentNode;\n  //   let children;\n  //   while (parent !== null && parent.tagName !== 'TREE-NODE') {\n  //     parent = parent.parentNode;\n  //   }\n  //   if (parent === null) {\n  //     children = this.nodes;\n  //   } else {\n  //     children = parent.au['tree-node'].viewModel.model.children;\n  //   }\n  //   let pos = children.indexOf(node.model);\n  //   children.splice(pos, 1);\n  // }\n\n  findParentNode(node: TreeNode): TreeNode {\n    let parent = node.element.parentNode;\n    let parentModel = null;\n    while (parent !== null && parent.tagName.toUpperCase() !== 'TREE-NODE') {\n      if (parent.tagName.toUpperCase() === 'TREE-VIEW') {\n        parent = null;\n      } else {\n        parent = parent.parentNode;\n      }\n    }\n    if (parent) {\n      parentModel = parent.au['tree-node'].viewModel;\n    }\n    return parentModel;\n  }\n\n  findRootNode(node: TreeNode): TreeNode {\n    let root = null;\n    let parent = this.findParentNode(node);\n    while (parent !== null) {\n      root = parent;\n      parent = this.findParentNode(parent);\n    }\n    return root;\n  }\n\n  expandAll(visitor: (node: NodeModel, parent: NodeModel) => boolean) {\n    return Promise.all(this.nodes.map(node => this.expandNodeAndChildren(node, null, visitor)))\n      .then(results => {\n        this.log.debug('expandNodeAndChildren results:', results);\n        let joined = [];\n        results.forEach(j => {\n          joined = joined.concat(j);\n        });\n        this.log.debug('expandNodeAndChildren joined:', joined);\n        return joined;\n      });\n  }\n\n  expandNodeAndChildren(node: NodeModel, parent: NodeModel, visitor: (node: NodeModel, parent: NodeModel) => boolean) {\n    return Promise.resolve(visitor(node, parent))\n    .then(result => {\n      if (node.hasChildren) {\n        return node.expandNode(true).then(() => {\n          return Promise.all(node.children.map(child => {\n            return this.expandNodeAndChildren(child, node, visitor);\n          }).concat(result ? node : null));\n        })\n        .then((potentials) => {\n          let joined = [];\n          potentials\n            .filter(p => p !== null)\n            .forEach(p => joined = joined.concat(p));\n          return joined;\n        });\n      }\n      return result ? node : null;\n    });\n  }\n\n  search(visitor: (node: NodeModel, parent: NodeModel) => boolean) {\n    return this.expandAll(visitor)\n    .then(results => {\n      let searchResults = [];\n      results.forEach(res => {\n        let treeNode = res._element;\n        if (treeNode) {\n          let root = this.findRootNode(treeNode);\n          if (root) {\n            if (searchResults.indexOf(root.model) === -1) {\n              searchResults.push(root.model);\n            }\n          } else {\n            if (searchResults.indexOf(res) === -1) {\n              searchResults.push(res);\n            }\n          }\n        } else {\n          this.log.warn('tree-node not found for', res);\n        }\n      });\n      this.log.debug('expand results:', results);\n      this.log.debug('search results:', searchResults);\n      return searchResults;\n    });\n  }\n\n  moveNode(node: TreeNode, target: TreeNode | TreeView, sibling: TreeNode) {\n    this.log.debug('moveNode', node, target, sibling);\n\n    // if (sibling) { }\n    if (target instanceof TreeNode) {\n      target.insertChild(node.model, sibling ? sibling.model : null);\n      let parent = this.findParentNode(node);\n      if (parent === null) {\n        parent = this;\n        parent.removeNode(node);\n      } else {\n        parent.removeChild(node.model);\n      }\n    } else if (target instanceof TreeView) {\n      let posNode = this.nodes.indexOf(node.model);\n      let posSibling = sibling\n        ? this.nodes.indexOf(sibling.model)\n        : this.nodes.length - 1;\n      if (posNode > -1 && posSibling > -1) {\n        this.nodes.splice(posNode, 1);\n        this.nodes.splice(posSibling, 0, node.model);\n      } else if (posSibling > -1) {\n        // move from node to TreeView\n        let parent = this.findParentNode(node);\n        // parent.removeNode(node);\n        parent.removeChild(node.model);\n        this.nodes.splice(posSibling, 0, node.model);\n      } else {\n        this.log.warn('sibling not found');\n      }\n    }\n  }\n\n  removeNode(node: TreeNode) {\n    // console.warn('removeNode not implemented');\n    let pos = this.nodes.indexOf(node.model);\n    this.nodes.splice(pos, 1);\n  }\n}\n"]}