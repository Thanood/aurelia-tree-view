{"version":3,"sources":["tree-view/tree-view.js"],"names":[],"mappings":"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","file":"tree-view/tree-view.js","sourceRoot":"/source/","sourcesContent":["import {bindable} from 'aurelia-templating';\nimport {inject} from 'aurelia-dependency-injection';\nimport {getLogger} from 'aurelia-logging';\nimport {bindingMode} from 'aurelia-binding';\nimport {NodeModel} from './node-model';\nimport {TreeNode} from './tree-node';\nimport {fireEvent} from '../common/events';\n\n@inject(Element)\nexport class TreeView {\n  @bindable() expandOnFocus: boolean = false;\n  @bindable() nodes: NodeModel[];\n  @bindable() multiSelect: boolean = false;\n  @bindable({\n    defaultBindingMode: bindingMode.twoWay\n  }) focused: NodeModel = null;\n  @bindable({\n    defaultBindingMode: bindingMode.twoWay\n  }) selected: NodeModel[] = [];\n  subscriptions = [];\n\n  // comparers\n  @bindable() compareEquality = null;\n\n  bind() {\n    this.multiSelect = (this.multiSelect === true || this.multiSelect === 'true');\n  }\n\n  constructor(element) {\n    this.element = element;\n    this.log = getLogger('tree-view');\n    this.compareEquality = (args) => { return args.a === args.b; };\n\n    let templateElement = this.element.querySelector('tree-node-template');\n    if (templateElement) {\n      this.templateElement = templateElement;\n    } else {\n      // this.log.warn('ctor - no template element');\n    }\n  }\n\n  attached() { }\n\n  detached() { }\n\n  created() {\n    if (this.templateElement) {\n      if (this.templateElement.au) {\n        let viewModel = this.templateElement.au.controller.viewModel;\n        this.log.debug('viewModel', viewModel);\n      } else {\n        this.log.warn('no viewmodel found for template', this.templateElement);\n      }\n    } else {\n      // this.log.warn('created - no template element');\n    }\n  }\n\n  nodesChanged(newValue, oldValue) {\n    if (newValue) {\n      // && this.templateElement\n      this.enhanceNodes(newValue);\n      this.preselectNodes(newValue);\n    }\n  }\n\n  enhanceNodes(nodes: NodeModel[]) {\n    nodes.forEach(node => {\n      if (node.children && typeof node.children !== 'function') {\n        this.enhanceNodes(node.children);\n      }\n      if (this.templateElement) {\n        node._template = this.templateElement.au.controller.viewModel.template;\n      }\n      // node._tree = this;\n      node._tree = {\n        focusNode: this.focusNode.bind(this),\n        selectNode: this.selectNode.bind(this),\n        deselectNode: this.deselectNode.bind(this),\n        multiSelect: this.multiSelect\n      };\n    });\n  }\n\n  preselectNodes(nodes: NodeModel[]) {\n    nodes.forEach(node => {\n      if (this.selected.find(n => this.compareEquality({a: node, b: n}))) {\n        node.selected = true;\n        node.expandNode().then(() => {\n          this.preselectNodes(node.children);\n        });\n      }\n    });\n  }\n\n  _suspendUpdate = false;\n  focusNode(node: NodeModel) {\n    if (!this._suspendUpdate && node !== this.focused) {\n      if (this.focused) {\n        this._suspendUpdate = true;\n        this.focused.focused = false;\n        this._suspendUpdate = false;\n      }\n      this.focused = node;\n      fireEvent(this.element, 'focused', { node });\n      if (this.expandOnFocus) {\n        node.expandNode();\n      }\n      if (!this.multiSelect) {\n        this.selected.splice(0);\n        this.selectNode(node);\n      }\n    }\n  }\n\n  selectNode(node: NodeModel) {\n    let existing = this.selected.findIndex(n => this.compareEquality({a: node, b: n}));\n      if (existing === -1) {\n      this.log.debug('selecting node', node);\n      this.selected.push(node);\n      fireEvent(this.element, 'selection-changed', { nodes: this.selected });\n    }\n  }\n\n  deselectNode(node: NodeModel) {\n    this.log.debug('deselecting node', node);\n    // let index = this.selected.indexOf(node);\n    let index = this.selected.findIndex(n => this.compareEquality({a: node, b: n}));\n    if (index === -1) {\n      this.log.error('node not found in selected', node);\n    } else {\n      this.selected.splice(index, 1);\n      fireEvent(this.element, 'selection-changed', { nodes: this.selected });\n    }\n  }\n\n  expandOnFocusChanged(newValue) {\n    this.expandOnFocus = (newValue === true || newValue === 'true');\n  }\n\n  // moveNode(node: TreeNode, target: TreeNode | TreeView) {\n  //   console.log('moveNode', node, target);\n  //   if (target instanceof TreeNode) {\n  //     target.model.children.push(node.model);\n  //   }\n  //   // target.model.children.push(node.model);\n  //   let parent = node.element.parentNode;\n  //   let children;\n  //   while (parent !== null && parent.tagName !== 'TREE-NODE') {\n  //     parent = parent.parentNode;\n  //   }\n  //   if (parent === null) {\n  //     children = this.nodes;\n  //   } else {\n  //     children = parent.au['tree-node'].viewModel.model.children;\n  //   }\n  //   let pos = children.indexOf(node.model);\n  //   children.splice(pos, 1);\n  // }\n\n  moveNode(node: TreeNode, target: TreeNode | TreeView, sibling: TreeNode) {\n    this.log.debug('moveNode', node, target, sibling);\n\n    if (target instanceof TreeNode) {\n      // target.model.children.push(node.model);\n      target.insertChild(node, sibling);\n      let parent = node.element.parentNode;\n      while (parent !== null && parent.tagName !== 'TREE-NODE') {\n        parent = parent.parentNode;\n      }\n      if (parent === null) {\n        parent = this;\n        parent.removeNode(node);\n      } else {\n        parent.au['tree-node'].viewModel.removeChild(node.model);\n      }\n    }\n  }\n\n  removeNode(node: TreeNode) {\n    console.warn('removeNode not implemented');\n  }\n}\n"]}