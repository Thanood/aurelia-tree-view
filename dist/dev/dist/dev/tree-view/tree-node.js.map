{"version":3,"sources":["tree-view/tree-node.js"],"names":[],"mappings":"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","file":"tree-view/tree-node.js","sourceRoot":"/source/","sourcesContent":["import {bindable, ViewCompiler, ViewResources, ViewSlot} from 'aurelia-templating';\nimport {Container, inject} from 'aurelia-dependency-injection';\nimport {TaskQueue} from 'aurelia-task-queue';\nimport {getLogger} from 'aurelia-logging';\nimport {NodeModel} from './node-model';\nimport {fireEvent} from '../common/events';\n\n@inject(Element, ViewCompiler, ViewResources, Container, TaskQueue)\nexport class TreeNode {\n  @bindable() model: NodeModel = null;\n\n  constructor(element: Element, viewCompiler: ViewCompiler, viewResources: ViewResources, container: Container, taskQueue: TaskQueue) {\n    this.element = element;\n    this.viewCompiler = viewCompiler;\n    this.viewResources = viewResources;\n    this.container = container;\n    this.taskQueue = taskQueue;\n    this.log = getLogger('tree-node');\n  }\n\n  attached() {\n    if (this.model && this.model._template && this.templateTarget) {\n      this.useTemplate();\n    }\n  }\n\n  insertChild(child: NodeModel, before: NodeModel) {\n    // TODO: insert at position\n    // let pos = this.model.children.indexOf(before);\n    this.model.children.push(child);\n  }\n\n  useTemplate() {\n    let template = this.model._template;\n    let viewFactory = this.viewCompiler.compile(`<template>${template}</template>`, this.viewResources);\n    let view = viewFactory.create(this.container);\n    let viewSlot = new ViewSlot(this.templateTarget, true);\n    viewSlot.add(view);\n    viewSlot.bind(this);\n    viewSlot.attached();\n  }\n\n  modelChanged(newValue) {\n    // this.log.debug('modelChanged', newValue, this.templateTarget);\n    if (newValue && newValue._template && this.templateTarget) {\n      this.useTemplate();\n    }\n  }\n\n  // removeNode(node: TreeNode) { }\n  removeChild(child: NodeModel) {\n    let pos = this.model.children.indexOf(child);\n    if (pos > -1) {\n      this.model.children.splice(pos, 1);\n    } else {\n      this.log.warn('child not found in model', child, this.model.children);\n    }\n  }\n\n  focusNode() {\n    this.model.focusNode();\n    fireEvent(this.element, 'focused', { node: this.model });\n  }\n  selectNode(e) {\n    this.log.debug('multi-select', this.model.selected, e);\n    // this.model.multiSelectNode();\n    let self = this;\n    this.taskQueue.queueTask(() => {\n      fireEvent(self.element, 'selected', { node: self.model });\n    });\n    // fireEvent(this.element, 'selected', { node: this.model });\n    // this.selectNode();\n\n    // permit bubbles\n    return true;\n  }\n\n  toggleNode() {\n    if (this.model.expanded) {\n      this.model.collapseNode();\n      fireEvent(this.element, 'collapsed', { node: this.model });\n    } else {\n      this.model.expandNode();\n      fireEvent(this.element, 'expanded', { node: this.model });\n    }\n  }\n}\n"]}