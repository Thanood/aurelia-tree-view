{"version":3,"sources":["tree-view/tree-node.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQ,c,qBAAA,Q;AAAU,Y,qBAAA,M;AAAQ,gB,qBAAA,U;;AAClB,e,cAAA,S;;AACA,e,iBAAA,S;;;0BAGK,Q,WADZ,OAAO,OAAP,EAAgB,UAAhB,C,UAEE,U;AAED,0BAAY,OAAZ,EAA8B,UAA9B,EAA0C;AAAA;;AAAA;;AACxC,eAAK,OAAL,GAAe,OAAf;AACA,eAAK,GAAL,GAAW,WAAW,SAAX,CAAqB,WAArB,CAAX;AACD;;2BAED,W,wBAAY,K,EAAkB,M,EAAmB;AAG/C,eAAK,KAAL,CAAW,QAAX,CAAoB,IAApB,CAAyB,KAAzB;AACD,S;;2BAGD,W,wBAAY,K,EAAkB;AAC5B,cAAI,MAAM,KAAK,KAAL,CAAW,QAAX,CAAoB,OAApB,CAA4B,KAA5B,CAAV;AACA,cAAI,MAAM,CAAC,CAAX,EAAc;AACZ,iBAAK,KAAL,CAAW,QAAX,CAAoB,MAApB,CAA2B,GAA3B,EAAgC,CAAhC;AACD,WAFD,MAEO;AACL,iBAAK,GAAL,CAAS,IAAT,CAAc,0BAAd,EAA0C,KAA1C,EAAiD,KAAK,KAAL,CAAW,QAA5D;AACD;AACF,S;;2BAED,U,yBAAa;AACX,eAAK,KAAL,CAAW,UAAX;AACA,oBAAU,KAAK,OAAf,EAAwB,UAAxB,EAAoC,EAAE,MAAM,KAAK,KAAb,EAApC;AACD,S;;2BAED,U,yBAAa;AACX,cAAI,KAAK,KAAL,CAAW,QAAf,EAAyB;AACvB,iBAAK,KAAL,CAAW,YAAX;AACA,sBAAU,KAAK,OAAf,EAAwB,WAAxB,EAAqC,EAAE,MAAM,KAAK,KAAb,EAArC;AACD,WAHD,MAGO;AACL,iBAAK,KAAL,CAAW,UAAX;AACA,sBAAU,KAAK,OAAf,EAAwB,UAAxB,EAAoC,EAAE,MAAM,KAAK,KAAb,EAApC;AACD;AACF,S;;;;;;iBApC8B,I","file":"tree-view/tree-node.js","sourceRoot":"/source/","sourcesContent":["import {bindable, inject, LogManager} from 'aurelia-framework';\nimport {NodeModel} from './node-model';\nimport {fireEvent} from '../common/events';\n\n@inject(Element, LogManager)\nexport class TreeNode {\n  @bindable() model: NodeModel = null;\n\n  constructor(element: Element, logManager) {\n    this.element = element;\n    this.log = logManager.getLogger('tree-node');\n  }\n\n  insertChild(child: NodeModel, before: NodeModel) {\n    // TODO: insert at position\n    // let pos = this.model.children.indexOf(before);\n    this.model.children.push(child);\n  }\n\n  // removeNode(node: TreeNode) { }\n  removeChild(child: NodeModel) {\n    let pos = this.model.children.indexOf(child);\n    if (pos > -1) {\n      this.model.children.splice(pos, 1);\n    } else {\n      this.log.warn('child not found in model', child, this.model.children);\n    }\n  }\n\n  selectNode() {\n    this.model.selectNode();\n    fireEvent(this.element, 'selected', { node: this.model });\n  }\n\n  toggleNode() {\n    if (this.model.expanded) {\n      this.model.collapseNode();\n      fireEvent(this.element, 'collapsed', { node: this.model });\n    } else {\n      this.model.expandNode();\n      fireEvent(this.element, 'expanded', { node: this.model });\n    }\n  }\n}\n"]}