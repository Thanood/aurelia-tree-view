{"version":3,"sources":["tree-view/node-model.js"],"names":[],"mappings":"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","file":"tree-view/node-model.js","sourceRoot":"/source/","sourcesContent":["import {computedFrom, observable} from 'aurelia-binding';\nimport {getLogger} from 'aurelia-logging';\n\nconst log = getLogger('node-model');\n\nexport class NodeModel {\n  title = '';\n  payload = null;\n  children: NodeModel[];\n  childrenGetter: {():Promise<NodeModel[]>};\n  visible = true;\n  expanded = false;\n  @observable() focused = false;\n  @observable() selected = false;\n  loading = false;\n  _template = null;\n  _templateModel = null;\n  _tree = null;\n\n  static createFromJSON(nodes: any[]) {\n    let models = [];\n    nodes.forEach(node => {\n      let children = node.children;\n      if (typeof children === 'function') {\n        // create promise wrapper so children are of type NodeModel\n        children = () => {\n          return new Promise((resolve, reject) => {\n            node.children().then(ch => {\n              resolve(NodeModel.createFromJSON(ch));\n            });\n          });\n        };\n      } else {\n        children = node.children ? NodeModel.createFromJSON(node.children) : null;\n      }\n      let payload = node.payload;\n      if (!payload) {\n        payload = {};\n        let keys = Object.keys(node);\n        keys.forEach(key => {\n          switch (key) {\n            case 'children':\n            // case 'title':\n            //   break;\n            default:\n              payload[key] = node[key];\n              break;\n          }\n        });\n      }\n      models.push(new NodeModel(node.title, children, payload));\n    });\n    return models;\n  }\n\n  constructor(title: string, children?: NodeModel[] | {():Promise<NodeModel[]>}, payload?: any) {\n    this.title = title;\n    this.payload = payload;\n    if (typeof children === 'function') {\n      this.childrenGetter = children;\n    } else {\n      this.children = children || [];\n    }\n    if (this.hasChildren) {\n      this.collapseNode(true);\n    }\n  }\n\n  @computedFrom('children')\n  get hasChildren() {\n    let result = false;\n    if (this.children) {\n      result = this.children.length > 0;\n    } else {\n      result = true;\n    }\n    return result;\n  }\n\n  expandNode(force = false) {\n    if (!this.expanded || force) {\n      let promise: Promise<NodeModel[]>;\n      if (this.childrenGetter) {\n        this.loading = true;\n        promise = this.childrenGetter().then(children => {\n          children.forEach(child => {\n            if (this._template) {\n              child._template = this._template;\n            }\n            child._tree = this._tree;\n          });\n          this.children = children;\n        });\n      } else {\n        promise = Promise.resolve();\n      }\n      return promise.then(() => {\n        this.loading = false;\n        this.children.forEach(child => {\n          child.visible = true;\n        });\n        this.expanded = true;\n      });\n    }\n    return Promise.resolve();\n  }\n\n  collapseNode(force = false) {\n    if (this.children && (this.expanded || force)) {\n      this.children.forEach(child => {\n        child.visible = false;\n      });\n      this.expanded = false;\n    }\n    return Promise.resolve();\n  }\n\n  focusedChanged(newValue) {\n    if (newValue) {\n      this._tree.focusNode(this);\n    }\n  }\n\n  toggleFocus() {\n    this.focused = !this.focused;\n  }\n\n  selectedChanged(newValue, oldValue) {\n    if (newValue !== oldValue) {\n      if (newValue) {\n        this._tree.selectNode(this);\n      } else if (newValue === false) {\n        this._tree.deselectNode(this);\n      }\n    }\n  }\n\n  selectChildren(recursive = false) {\n    let promise;\n    if (this.expanded) {\n      promise = Promise.resolve();\n    } else {\n      promise = this.expandNode();\n    }\n    return promise.then(() => {\n      let childPromises = [];\n      this.children.forEach(child => {\n        child.selected = true;\n        if (recursive) {\n          log.debug('selecting children recursively', this);\n          childPromises.push(child.selectChildren(recursive));\n        }\n      });\n      return Promise.all(childPromises);\n    });\n  }\n\n  deselectChildren(recursive = false) {\n    let promise;\n    if (this.expanded) {\n      promise = Promise.resolve();\n    } else {\n      promise = this.expandNode();\n    }\n    return promise.then(() => {\n      let childPromises = [];\n      this.children.forEach(child => {\n        child.selected = false;\n        if (recursive) {\n          childPromises.push(child.deselectChildren(recursive));\n        }\n      });\n      return Promise.all(childPromises);\n    });\n  }\n\n  toggleSelected() {\n    this.selected = !this.selected;\n  }\n}\n"]}