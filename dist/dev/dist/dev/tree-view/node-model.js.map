{"version":3,"sources":["tree-view/node-model.js"],"names":[],"mappings":"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","file":"tree-view/node-model.js","sourceRoot":"/source/","sourcesContent":["import {computedFrom} from 'aurelia-binding';\n\nexport class NodeModel {\n  title = '';\n  children: NodeModel[];\n  childrenGetter: {():Promise<NodeModel[]>};\n  visible = true;\n  expanded = false;\n  selected = false;\n  loading = false;\n\n  static createFromJSON(nodes: any[]) {\n    let models = [];\n    nodes.forEach(node => {\n      let children = node.children;\n      if (typeof children === 'function') {\n        // create promise wrapper so children are of type NodeModel\n        children = () => {\n          return new Promise((resolve, reject) => {\n            node.children().then(ch => {\n              resolve(NodeModel.createFromJSON(ch));\n            });\n          });\n        };\n      } else {\n        children = node.children ? NodeModel.createFromJSON(node.children) : null;\n      }\n      models.push(new NodeModel(node.title, children));\n    });\n    return models;\n  }\n\n  constructor(title: string, children?: NodeModel[] | {():Promise<NodeModel[]>}) {\n    this.title = title;\n    if (typeof children === 'function') {\n      this.childrenGetter = children;\n    } else {\n      this.children = children || [];\n    }\n    if (this.hasChildren) {\n      this.collapseNode(true);\n    }\n  }\n\n  @computedFrom('children')\n  get hasChildren() {\n    let result = false;\n    if (this.children) {\n      result = this.children.length > 0;\n    } else {\n      result = true;\n    }\n    return result;\n  }\n\n  expandNode(force = false) {\n    if (!this.expanded || force) {\n      let promise: Promise<NodeModel[]>;\n      if (this.childrenGetter) {\n        this.loading = true;\n        promise = this.childrenGetter().then(children => {\n          this.children = children;\n\n        });\n      } else {\n        promise = Promise.resolve();\n      }\n      promise.then(() => {\n        this.loading = false;\n        this.children.forEach(child => {\n          child.visible = true;\n        });\n        this.expanded = true;\n      });\n    }\n  }\n\n  collapseNode(force = false) {\n    if (this.children && (this.expanded || force)) {\n      this.children.forEach(child => {\n        child.visible = false;\n      });\n      this.expanded = false;\n    }\n  }\n\n  selectNode() {\n    this.selected = true;\n  }\n\n  deselectNode() {\n    this.selected = false;\n  }\n\n  isSelected() {\n    return this.selected;\n  }\n\n  toggleSelected() {\n    this.selected = !this.selected;\n  }\n}\n"]}